import numpy as np
from functools import wraps
import matplotlib.pyplot as plt

def viz_generated_data(func):
    """
    Visualizes data generated by a given function.
    
    Parameters:
        func (callable): Function that generates data (returns X, y).
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        X, y = func(*args, **kwargs)
        
        plt.figure(figsize=(6, 6))
        plt.scatter(X[y == 0, 0], X[y == 0, 1], color='red', label='Class 0')
        plt.scatter(X[y == 1, 0], X[y == 1, 1], color='blue', label='Class 1')
        plt.xticks([])
        plt.yticks([])
        plt.legend()
        plt.title("Generated Data Visualization")
        plt.show()
        
        return X, y
    
    return wrapper

def generate_circular_data(n_samples=500, noise=0.1):
    n_samples_out = n_samples // 2
    n_samples_in = n_samples - n_samples_out
    r_out = 1.0
    r_in = 0.5
    theta_out = 2 * np.pi * np.random.rand(n_samples_out)
    x_out = r_out * np.cos(theta_out) + noise * np.random.randn(n_samples_out)
    y_out = r_out * np.sin(theta_out) + noise * np.random.randn(n_samples_out)
    theta_in = 2 * np.pi * np.random.rand(n_samples_in)
    x_in = r_in * np.cos(theta_in) + noise * np.random.randn(n_samples_in)
    y_in = r_in * np.sin(theta_in) + noise * np.random.randn(n_samples_in)
    X = np.vstack((np.column_stack((x_out, y_out)), np.column_stack((x_in, y_in))))
    y = np.hstack((np.ones(n_samples_out), np.zeros(n_samples_in)))
    return X, y

def generate_spiral_data(n_samples=500, noise=0.1):
    n = np.sqrt(np.random.rand(n_samples // 2)) * 780 * (2 * np.pi) / 360
    d1x = -np.cos(n) * n + noise * np.random.randn(n_samples // 2)
    d1y = np.sin(n) * n + noise * np.random.randn(n_samples // 2)
    X1 = np.column_stack((d1x, d1y))
    y1 = np.zeros(n_samples // 2)
    d2x = np.cos(n) * n + noise * np.random.randn(n_samples // 2)
    d2y = -np.sin(n) * n + noise * np.random.randn(n_samples // 2)
    X2 = np.column_stack((d2x, d2y))
    y2 = np.ones(n_samples // 2)
    X = np.vstack((X1, X2))
    y = np.hstack((y1, y2))
    return X, y

def generate_checkerboard_data(n_samples=500, grid_size=4, noise=0.1):
    x = np.random.rand(n_samples) * grid_size
    y = np.random.rand(n_samples) * grid_size
    labels = ((np.floor(x) + np.floor(y)) % 2).astype(int)
    X = np.column_stack((x, y)) + noise * np.random.randn(n_samples, 2)
    return X, labels

def generate_linearly_separable_data(n_samples=500, noise=0.1):
    X = np.random.randn(n_samples, 2)
    y = (X[:, 1] > X[:, 0]).astype(int)
    X += noise * np.random.randn(n_samples, 2)
    return X, y

@viz_generated_data
def generate_data(choice=1, n_samples=500, noise=0.1, grid_size=4):
    """
    Generates data based on user input or random selection.
    Parameters:
        choice (str or int): One of ['circular', 'spiral', 'checkerboard', 'linear'] or an integer to select by %4.
        n_samples (int): Number of samples to generate.
        noise (float): Noise level to add to the data.
        grid_size (int): Grid size for checkerboard data.
    Returns:
        X (array): Features.
        y (array): Labels.
    """
    if isinstance(choice, int):
        choice = ['circular', 'spiral', 'checkerboard', 'linear'][choice % 4]
    
    if choice == 'circular':
        print('  -- loading circular data')
        return generate_circular_data(n_samples, noise)
    elif choice == 'spiral':
        print('  -- loading spiral data')
        return generate_spiral_data(n_samples, noise)
    elif choice == 'checkerboard':
        print('  -- loading checkerboard data')
        return generate_checkerboard_data(n_samples, grid_size, noise)
    else:
        print('  -- loading linear data')
        return generate_linearly_separable_data(n_samples, noise)
